{"ast":null,"code":"import * as types from './types';\nimport * as api from '../../api';\nexport const fetchMessages = () => async dispatch => {\n  try {\n    dispatch({\n      type: types.FETCH_MESSAGES_REQUEST\n    });\n    const {\n      data\n    } = await api.fetchMessages();\n    dispatch({\n      type: types.FETCH_MESSAGES_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: types.FETCH_MESSAGES_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const fetchSingleMessage = id => async dispatch => {\n  try {\n    dispatch({\n      type: types.FETCH_SINGLE_MESSAGE_REQUEST\n    });\n    const {\n      data\n    } = await api.fetchSingleMessage(id);\n    dispatch({\n      type: types.FETCH_SINGLE_MESSAGE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: types.FETCH_SINGLE_MESSAGE_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const createMessage = message => async dispatch => {\n  try {\n    dispatch({\n      type: types.CREATE_MESSAGE_REQUEST,\n      payload: message\n    });\n    const {\n      data\n    } = await api.createMessage(message);\n    dispatch({\n      type: types.CREATE_MESSAGE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: types.CREATE_MESSAGE_FAIL,\n      payload: error.message\n    });\n  }\n};","map":{"version":3,"sources":["E:/RealProjects/Projects Done/ReactTestProject/buzlylabtestproject/client/src/redux/actions/messages.js"],"names":["types","api","fetchMessages","dispatch","type","FETCH_MESSAGES_REQUEST","data","FETCH_MESSAGES_SUCCESS","payload","error","FETCH_MESSAGES_FAIL","message","fetchSingleMessage","id","FETCH_SINGLE_MESSAGE_REQUEST","FETCH_SINGLE_MESSAGE_SUCCESS","FETCH_SINGLE_MESSAGE_FAIL","createMessage","CREATE_MESSAGE_REQUEST","CREATE_MESSAGE_SUCCESS","CREATE_MESSAGE_FAIL"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,SAAvB;AACA,OAAO,KAAKC,GAAZ,MAAqB,WAArB;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM,MAAMC,QAAN,IAAkB;AACnD,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEJ,KAAK,CAACK;AAAd,KAAD,CAAR;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAML,GAAG,CAACC,aAAJ,EAAvB;AACAC,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEJ,KAAK,CAACO,sBAAd;AAAsCC,MAAAA,OAAO,EAAEF;AAA/C,KAAD,CAAR;AACD,GAJD,CAIE,OAAOG,KAAP,EAAc;AACdN,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEJ,KAAK,CAACU,mBAAd;AAAmCF,MAAAA,OAAO,EAAEC,KAAK,CAACE;AAAlD,KAAD,CAAR;AACD;AACF,CARM;AAUP,OAAO,MAAMC,kBAAkB,GAAGC,EAAE,IAAI,MAAMV,QAAN,IAAkB;AACxD,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEJ,KAAK,CAACc;AAAd,KAAD,CAAR;AACA,UAAM;AAAER,MAAAA;AAAF,QAAW,MAAML,GAAG,CAACW,kBAAJ,CAAuBC,EAAvB,CAAvB;AACAV,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEJ,KAAK,CAACe,4BAAd;AAA4CP,MAAAA,OAAO,EAAEF;AAArD,KAAD,CAAR;AACD,GAJD,CAIE,OAAOG,KAAP,EAAc;AACdN,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEJ,KAAK,CAACgB,yBAAd;AAAyCR,MAAAA,OAAO,EAAEC,KAAK,CAACE;AAAxD,KAAD,CAAR;AACD;AACF,CARM;AAUP,OAAO,MAAMM,aAAa,GAAGN,OAAO,IAAI,MAAMR,QAAN,IAAkB;AACxD,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEJ,KAAK,CAACkB,sBAAd;AAAsCV,MAAAA,OAAO,EAAEG;AAA/C,KAAD,CAAR;AACA,UAAM;AAAEL,MAAAA;AAAF,QAAW,MAAML,GAAG,CAACgB,aAAJ,CAAkBN,OAAlB,CAAvB;AACAR,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEJ,KAAK,CAACmB,sBADL;AAEPX,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAID,GAPD,CAOE,OAAOG,KAAP,EAAc;AACdN,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEJ,KAAK,CAACoB,mBAAd;AAAmCZ,MAAAA,OAAO,EAAEC,KAAK,CAACE;AAAlD,KAAD,CAAR;AACD;AACF,CAXM","sourcesContent":["import * as types from './types';\r\nimport * as api from '../../api';\r\n\r\nexport const fetchMessages = () => async dispatch => {\r\n  try {\r\n    dispatch({ type: types.FETCH_MESSAGES_REQUEST });\r\n    const { data } = await api.fetchMessages();\r\n    dispatch({ type: types.FETCH_MESSAGES_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({ type: types.FETCH_MESSAGES_FAIL, payload: error.message });\r\n  }\r\n};\r\n\r\nexport const fetchSingleMessage = id => async dispatch => {\r\n  try {\r\n    dispatch({ type: types.FETCH_SINGLE_MESSAGE_REQUEST });\r\n    const { data } = await api.fetchSingleMessage(id);\r\n    dispatch({ type: types.FETCH_SINGLE_MESSAGE_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({ type: types.FETCH_SINGLE_MESSAGE_FAIL, payload: error.message });\r\n  }\r\n};\r\n\r\nexport const createMessage = message => async dispatch => {\r\n  try {\r\n    dispatch({ type: types.CREATE_MESSAGE_REQUEST, payload: message });\r\n    const { data } = await api.createMessage(message);\r\n    dispatch({\r\n      type: types.CREATE_MESSAGE_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({ type: types.CREATE_MESSAGE_FAIL, payload: error.message });\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}